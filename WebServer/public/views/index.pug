extends ./partials/layout.pug

block head
    link(href="/css/index.css", type="text/css", rel="stylesheet")

block content
    #background.grey-text.text-darken-3
        img(src="img/sigma2.png", height="100px")
        h4 Welcome to #{title}
        h5 The Magenta modular NodeJS boilerplate tuned for demo !
        ul
            li Simple.
            li Robust.
            li Open-source.
        a.waves-effect.waves-light.btn-flat.grey(href="https://magenta.trotin-corp.ovh", target="_blank")
            | Documentation
            i.material-icons.right exit_to_app
    a.navigation.icon-scroll(href="#ModuleOverview")
    #mask
    .container#ModuleOverview
        h5.center Module overview
        .row
            .col.s12.m6
                .card.blue-grey.darken-1
                    .card-content.white-text
                        span.card-title ORM
                        p
                            | The ORM (Object Relational Mapping) in Magenta use Sequelize for relational mysql databases. It act as a data store for the entire application.
                            br
                            | The only available data structures in this showcase is text containing a label and a value.
                    .card-action
                        p.orange-text(ng-controller="textCtrl") "{{ text.value }}" created on {{ text.createdAt }} with label "{{ text.labelÂ }}"
            .col.s12.m6
                .card.blue-grey.darken-1
                    .card-content.white-text
                        span.card-title Authentication
                        p
                            | The Authentication module set up auth strategies using Passport.
                            br
                            | A local strategy is available, identifying users with username:password from database. OAuth support is a Work In Progress.
                    .card-action
                        p.orange-text #{user ? 'Connect as ' + user.username : 'Not Connected'}
        .row
            .col.s12.m6
                .card
                    .card-content
                        span.card-title Web Server
                        p The Web Server module configure & handle http requests. By default it only exposes website's related static files but other modules will add functionalities.
                    .card-tabs
                        ul.tabs.tabs-fixed-width
                            li.tab
                                a(href='#wsauth') WS Auth
                            li.tab
                                a.active(href='#wsapi') WS API
                            li.tab
                                a(href='#wsfu') WS FileUpload
                    .card-content.grey.lighten-4
                        #wsauth The Authentication WebServer bind auth strategies to http endpoinds, by default POST:/login POST:/signup GET:/logout
                            if !user
                                form(action="/login", method="post")
                                    .input-field
                                        i.material-icons.prefix account_circle
                                        input.validate#email(type="text", name="username")
                                        label(for="username") Email
                                    .input-field
                                        i.material-icons.prefix lock_outline
                                        input.validate#password(type="password", name="password")
                                        label(for="password") Password
                                    .center
                                        button.btn#submit Login
                            else
                                br
                                a.btn(href="/logout") Logout
                        #wsapi The WebServer API bind the CRUD ORM's API to HTTP transport in a classic RESTful way
                        #wsfu The WebServer FileUpload simply manage file uploading through HTTP POST:/uploads/:id
                            h5 > Send a file
                            form(action="/uploads", enctype="multipart/form-data", method="post")
                                input(type="file", name="fileUpload")
                                input(type="submit", value="Upload")
            .col.s12.m6
                .card.blue-grey.darken-1
                    .card-content.white-text
                        span.card-title Web Socket Server
                        p
                            | The Web Socket Server module powers WebSockets with ws npm
                            br
                            | Yet only a client-server communication channel for notifications is set up. Applications like inter user chat & pub/sub will be implemented in the future.
                            br
                            | Ctrl + click this button and wait a second to see the newly accepted connection to WSS
                            a.btn(href="http://0.0.0.0:3000", target="_blank") Open this website again
                    .card-action
                        ul.orange-text(ng-controller="WSCtrl")
                            li(ng-repeat="data in MyData.collection track by $index") {{ data.msg }}

